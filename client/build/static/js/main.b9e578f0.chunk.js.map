{"version":3,"sources":["components/ClassInfo.js","trie.js","components/Search.js","components/App.js","index.js"],"names":["ClassInfo","props","hasClass","this","selectedClass","hasTitle","title","hasId","id","hasPrefixTitle","prefixTitle","descriptionList","description","className","map","name","index","key","href","prefix","number","React","Component","TrieNode","value","children","endWord","courses","Trie","string","course","addWordHelper","node","str","length","push","slice","allWords","allCourses","remainingTree","tree","substr","getRemainingTree","allWordsHelper","stringSoFar","k","child","newString","forEach","Search","state","searchTerm","autocompleteData","courseCodeTrie","courseTitleTrie","documents","idf","loadError","onChange","bind","onSelect","autocompleteSearch","courseCodeTrie_t0","performance","now","code","addWord","toUpperCase","split","titleWord","setState","console","log","courseCodeTrie_t1","courseIdf_t0","JSON","stringify","description_word_case","description_word","courseIdf_t1","sheetsApi_t0","script","document","createElement","src","onload","window","gapi","load","client","setApiKey","process","request","sheets","spreadsheets","values","get","spreadsheetId","range","trackPromise","then","response","result","item","parse","sheetsApi_t1","loadCoursesByCodeAndTitle","loadCoursesByIdf","catch","err","body","appendChild","loadSheetsApi","results","predictWord","data","tf_idf_scores","total_documents","Object","keys","idf_score","Math","tf_idf","e","target","t0","autocompleteResults","t1","selected","find","obj","class","alt","role","promiseTracker","usePromiseTracker","inputProps","placeholder","ariaLlabel","wrapperStyle","width","wrapperProps","getItemValue","items","sortItems","a","b","renderMenu","styles","renderItem","isHighlighted","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b9e578f0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../style/class.css\"\n\nexport default class ClassInfo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        // check that the selected class has all proper fields\n        const hasClass = this.props.selectedClass !== null;\n        const hasTitle = hasClass && this.props.selectedClass.title && this.props.selectedClass.title !== \"\";\n        const hasId = hasClass && this.props.selectedClass.id && this.props.selectedClass.id !== \"\";\n        const hasPrefixTitle = hasClass && this.props.selectedClass.prefixTitle && this.props.selectedClass.prefixTitle !== \"\";\n        const hasDescription = hasClass && this.props.selectedClass.description && this.props.selectedClass.description !== null;\n        var descriptionList = hasDescription ? this.props.selectedClass.description : [];\n        \n        return (\n            <div className=\"align-items-center h-md-100 p-5 justify-content-center\">\n                \n                <div className=\"class_title d-md-flex \">{hasTitle && hasId ? this.props.selectedClass.title : \"\"}</div>\n                <div className=\"class_code d-md-flex \">{hasId ? this.props.selectedClass.id : \"\"}</div>\n                <div className=\"class_category d-md-flex \">{hasPrefixTitle ? this.props.selectedClass.prefixTitle : \"\"}</div>\n\n                <div className=\"class_description\">\n\n                {descriptionList.map(function(name, index){\n                    return <div className=\"class_description_item d-md-flex\" key={ index }>{name}</div>;\n                })}\n                </div>\n\n                <a className=\"class_review d-md-flex\" href={hasId ? 'https://penncoursereview.com/course/'+this.props.selectedClass.prefix+'-'+this.props.selectedClass.number : \"#\"}>\n                {hasId ? \"Penn Course Review\" : \"\"}\n                </a>\n\n                \n            </div>\n\n        );\n    }\n}","/**\n * A trie, also called digital tree or prefix tree, is a kind of search tree—an ordered tree \n * data structure used to store a dynamic set or associative array where the keys are \n * usually strings. Unlike a binary search tree, no node in the tree stores the \n * key associated with that node; instead, its position in the tree defines the\n * key with which it is associated; i.e., the value of the key is distributed \n * across the structure.\n * \n * https://en.wikipedia.org/wiki/Trie\n */\nclass TrieNode {\n    constructor(value) {\n      this.children = {};\n      this.endWord = null;\n      this.value = value;\n      this.courses = [];\n    }\n}\n\nexport default class Trie extends TrieNode {\n    constructor() {\n      super(null);\n    }\n  \n    /**\n     * Add a string and associated course to the trie. Recursive Implementation.\n     * @param {The string to enter into the trie} string \n     * @param {The course where the string was taken from} course \n     */\n    addWord(string, course) {\n      const addWordHelper = (node, str, course) => {\n        if (!node.children[str[0]]) {\n          node.children[str[0]] = new TrieNode(str[0]);\n          if (str.length === 1) {\n            node.children[str[0]].endWord = 1;\n            node.children[str[0]].courses.push(course)\n          }\n        } else {\n\n          //have already hit this end-point in the trie before, so just add the course\n          if(node.children[str[0]].courses.length > 0){\n            node.children[str[0]].courses.push(course)\n          }\n        }\n        if (str.length > 1) {\n          addWordHelper(node.children[str[0]], str.slice(1), course);\n        }\n      };\n      addWordHelper(this, string, course);\n    }\n\n    /**\n     * Return all strings and their associated courses for a given prefix.\n     * @param {The prefix of a string you are searching for} string \n     */\n    predictWord(string) {\n        var getRemainingTree = function(string, tree) {\n          var node = tree;\n\n          while (string && string !== \"\") {\n            if(typeof node === 'undefined'){\n              break\n            }\n            node = node.children[string[0]];\n            string = string.substr(1);\n          }\n          return node;\n        };\n    \n        var allWords = [];\n        var allCourses = {};\n        \n        var allWordsHelper = function(stringSoFar, tree) {\n          for (let k in tree.children) {\n            const child = tree.children[k]\n            var newString = stringSoFar + child.value;\n            if (child.endWord) {\n              allWords.push(newString);\n\n              child.courses.forEach((course, index) =>{\n                allCourses[course.prefix+course.number] = course\n              })\n            }\n            allWordsHelper(newString, child);\n          }\n        };\n    \n        var remainingTree = getRemainingTree(string, this);\n        if (remainingTree) {\n          allWordsHelper(string, remainingTree);\n          \n          //if entire term being searched is entered, also add it\n          if(remainingTree.endWord){\n            allWords.push(string);\n\n            remainingTree.courses.forEach((course, index) =>{\n              allCourses[course.prefix+course.number] = course\n            })\n          }\n        }\n    \n        return allWords, allCourses;\n    }\n  }","import React from \"react\";\nimport \"../style/search.css\"\nimport Autocomplete from 'react-autocomplete';\nimport Loader from 'react-promise-loader';\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\nimport ClassInfo from './ClassInfo';\nimport Trie from '../../src/trie';\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchTerm: \"\",\n            autocompleteData: [],\n            selectedClass: null,\n            courseCodeTrie: null,\n            courseTitleTrie: null,\n            documents: {},\n            idf: {},\n            loadError: false\n        }\n\n        //autocomplete functions\n        this.onChange = this.onChange.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.autocompleteSearch = this.autocompleteSearch.bind(this);\n    }\n\n    /**\n     * @Input - A dictionary of courses loadded via SHEETS API\n     * populate two tries for autocomplete. \n     * One trie for autcompleting on the course codes.\n     * Another trie for autocompleting on the course title.\n     */\n    loadCoursesByCodeAndTitle(courses) {\n        var courseCodeTrie_t0 = performance.now()\n\n        if (courses) {\n            //successful\n            var courseCodeTrie = new Trie()\n            var courseTitleTrie = new Trie()\n\n            for (const code in courses) {\n                let course = courses[code]\n                courseCodeTrie.addWord(code, course)\n                courseCodeTrie.addWord(course.prefix + \" \" + course.number, course)\n\n                //trie to autocomplete on words in the title of course\n                let items = course.title.toUpperCase().split(\" \")\n                items.forEach((titleWord, index) => {\n                    courseTitleTrie.addWord(titleWord, course)\n                })\n            }\n\n            this.setState({\n                courseCodeTrie: courseCodeTrie,\n                courseTitleTrie: courseTitleTrie\n            });\n\n        } else {\n            //display error msg\n            console.log(\"Fail to get courseCodeTrie!\")\n        }\n        var courseCodeTrie_t1 = performance.now()\n        console.log(\"courseCodeTrie took \" + (courseCodeTrie_t1 - courseCodeTrie_t0) + \" milliseconds.\")\n\n    }\n\n    /**\n     * @Input - A dictionary of courses loadded via SHEETS API\n     * Create a dictionary of terms and frequencies\n     * for autocomplete based on words in descriptions. \n     */\n    loadCoursesByIdf(courses) {\n        var courseIdf_t0 = performance.now()\n        \n        var documents = {}\n        var idf = {}\n        for (const code in courses) {\n            //---START TF-IDF Calculations\n            //TF(t) = (Number of times term t appears in a document) / (Total number of terms in the document).\n            //IDF(t) = log_e(Total number of documents / Number of documents with term t in it).\n            //documents[document][term] = (Number of times term t appears in a document)\n            documents[code] = {}\n            JSON.stringify(courses[code].description).split(/\\W+/).forEach((description_word_case, index) => {\n                let description_word = description_word_case.toUpperCase()\n                if (!(description_word in documents[code])) {\n                    documents[code][description_word] = 1\n\n                    if (!(description_word in idf)) {\n                        idf[description_word] = 1\n                    } else {\n                        idf[description_word] = idf[description_word] + 1\n                    }\n\n                } else {\n                    documents[code][description_word] = documents[code][description_word] + 1\n                }\n            })\n            //---END TF-IDF Calculations\n        }\n        this.setState({\n            documents: documents,\n            idf: idf\n        })\n        var courseIdf_t1 = performance.now()\n        console.log(\"courseIDF took \" + (courseIdf_t1 - courseIdf_t0) + \" milliseconds.\")\n    }\n\n    loadSheetsApi() {\n        var sheetsApi_t0 = performance.now()\n        const script = document.createElement(\"script\");\n        script.src = \"https://apis.google.com/js/api.js\";\n\n        script.onload = () => {\n            window.gapi.load('client', () => {\n\n                window.gapi.client.setApiKey(process.env.REACT_APP_SHEETS_API_KEY);\n                window.gapi.client.load('sheets', 'v4', () => {\n                    var params = {\n                        // The ID of the spreadsheet to retrieve data from.\n                        spreadsheetId: process.env.REACT_APP_SHEETS_ID,\n\n                        // The A1 notation of the values to retrieve.\n                        range: process.env.REACT_APP_SHEETS_RANGE\n                    };\n                    var request = window.gapi.client.sheets.spreadsheets.values.get(params);\n                    trackPromise(request.then(response => {\n\n                        var courses = {}\n                        response.result.values.forEach(item => {\n                            courses[item[0] + item[1]] = { prefix: item[0], number: item[1], title: item[2], prefixTitle: item[3], description: JSON.parse(item[4]) }\n                        });\n\n                        var sheetsApi_t1 = performance.now()\n                        console.log(\"download courses took \" + (sheetsApi_t1 - sheetsApi_t0) + \" milliseconds.\")\n\n                        this.loadCoursesByCodeAndTitle(courses)\n                        this.loadCoursesByIdf(courses)\n                    }).catch(err => {\n                        console.log(err)\n                        this.setState({\n                            loadError: true,\n                        });\n                    }));\n                });\n            });\n        };\n\n        document.body.appendChild(script);\n    }\n\n    componentDidMount() {\n        this.loadSheetsApi()\n    }\n\n    autocompleteSearch() {\n        var results = {}\n\n        //search by course codes\n        if (this.state.courseCodeTrie !== null) {\n            let courseCodes, courses = this.state.courseCodeTrie.predictWord(this.state.searchTerm.toUpperCase());\n            for (const code in courses) {\n                let data = courses[code]\n                data['id'] = code\n                data['strength'] = 1000000\n                results[code] = (data)\n            }\n        }\n\n        //search by course titles\n        if (this.state.courseTitleTrie !== null) {\n            let words, courses = this.state.courseTitleTrie.predictWord(this.state.searchTerm.toUpperCase());\n            for (const code in courses) {\n                let data = courses[code]\n                data['id'] = code\n                data['strength'] = 1000000\n                results[code] = (data)\n            }\n        }\n\n        //TF-IDF Calculations\n        //TF(t) = (Number of times term t appears in a document) / (Total number of terms in the document).\n        //IDF(t) = log_e(Total number of documents / Number of documents with term t in it).\n        var tf_idf_scores = {}\n        if (this.state.searchTerm.toUpperCase() in this.state.idf) {\n            //Object.keys(documents).length = total number of documents\n            let total_documents = Object.keys(this.state.documents).length\n            let idf_score = Math.log(total_documents / this.state.idf[this.state.searchTerm.toUpperCase()])\n            for (const course in this.state.documents) {\n                if (course in results) {\n                    continue\n                }\n                //documents[document][term] = (Number of times term t appears in a document)\n                //Object.keys(documents[document]).length = (Total number of terms in the document)\n                let tf = this.state.documents[course][this.state.searchTerm.toUpperCase()] / Object.keys(this.state.documents[course]).length\n                let tf_idf = tf * idf_score\n                if (tf_idf > 0.05) {\n                    tf_idf_scores[course] = tf_idf\n                }\n            }\n        }\n\n        //search by tf-idf\n        for (const course in tf_idf_scores) {\n            if (this.state.courseCodeTrie !== null) {\n                let courseCodes, courses = this.state.courseCodeTrie.predictWord(course);\n                for (const code in courses) {\n                    let data = courses[code]\n                    data['id'] = code\n                    data['strength'] = tf_idf_scores[course]\n                    results[code] = (data)\n                }\n            }\n        }\n\n        //display nothing found if results are empty\n        if (Object.keys(results).length === 0) {\n            let data = { id: \"\", title: \"No Class Found\" }\n            results[\"\"] = (data)\n        }\n\n        return Object.values(results)\n    }\n\n    // invoked when the user types something. A delay of 200ms is\n    // already provided to avoid DDoS'ing your own servers\n    onChange(e) {\n        this.setState({\n            searchTerm: e.target.value\n        }, () => {\n            //Handle the remote request for autocomplete\n            if (this.state.searchTerm !== \"\" && this.state.searchTerm.length > 1) {\n\n                var t0 = performance.now()\n                let autocompleteResults = this.autocompleteSearch()\n                this.setState({\n                    autocompleteData: autocompleteResults\n                });\n                var t1 = performance.now()\n                console.log(\"Autocomplete took \" + (t1 - t0) + \" milliseconds.\")\n            }\n        });\n    }\n\n    // called when the user clicks an option or hits enter\n    onSelect(e) {\n        let selected = this.state.autocompleteData.find(obj => {\n            return obj.id === e\n        })\n\n        this.setState({\n            selectedClass: selected,\n            searchTerm: selected.id\n        });\n\n        return e;\n    }\n\n    render() {\n        return (\n            <div class=\"d-md-flex h-md-100 align-items-center\">\n\n                <div class=\"col-md-6 p-0 bg-indigo h-md-100\">\n                    <div class=\"text-white align-items-center h-100 p-4 text-center justify-content-center\">\n                        <div className=\"title\">\n                            <img src=\"android-chrome-512x512.png\" alt=\"Penn Course Search\" className=\"title-logo\"></img>\n                            <span className=\"title-text\">enn Course Search</span>\n                        </div>\n\n                        <div className={this.state.loadError ? 'alert alert-danger' : \"hidden\"} role=\"alert\" >\n                            Sorry, there was a problem loading classes, try refreshing the page.\n                        </div>\n\n                        <Loader promiseTracker={usePromiseTracker} />\n\n                        <Autocomplete\n                            inputProps={{ placeholder: \"Enter a class, code, or keyword...\", className: \"search_input\", ariaLlabel: \"Search\" }}\n                            wrapperStyle={{ width: \"100%\" }}\n                            wrapperProps={{ className: \"searchbar\" }}\n                            placeholder=\"Enter a class, code, or keyword...\"\n                            getItemValue={item => item.id}\n                            value={this.state.searchTerm}\n                            items={this.state.autocompleteData}\n                            onChange={this.onChange}\n                            onSelect={this.onSelect}\n                            sortItems={(a, b) => {\n                                return b['strength'] - a['strength']\n                            }}\n                            renderMenu={(items, value, styles) => (\n                                <div className=\"searchmenu align-items-center justify-content-center\" children={items} />\n                            )}\n\n                            renderItem={(item, isHighlighted) => (\n                                <div\n                                    className={`searchmenu_item ${isHighlighted ? 'item-highlighted' : ''}`}\n                                    key={item.id} >\n                                    <p className=\"result_text\"><span className=\"result_code\">{item.prefix} {item.number}</span> {item.title}</p>\n\n                                </div>\n                            )}\n                        />\n                    </div>\n                </div>\n\n                <div class=\"col-md-6 p-0 h-md-100 loginarea\">\n                    <ClassInfo selectedClass={this.state.selectedClass} />\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from \"react\";\nimport {\n\tBrowserRouter as Router,\n\tRoute,\n\tSwitch\n} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Search from './Search';\n\nexport default class App extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Router>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/' component={Search} />\n\t\t\t\t\t\t<Route exact path='*' component={Search} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}